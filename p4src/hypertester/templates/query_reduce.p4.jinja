#ifndef _HYPERTESTER_QUERY_REDUCE_H_
#define _HYPERTESTER_QUERY_REDUCE_H_

{% for reduce in reduce_queries %}
header_type {{ reduce.name  }}_md_t {
	fields {
		dgst : 16;
		idx1 : 16;
		idx2 : 16;
		dgst1 : 16;
		cnt1 : 16;
		dgst2 : 16;
		cnt2 : 16;
		query_res1 : 16;
		query_res2 : 16;
		output : 16;
	}
}
metadata {{ reduce.name  }}_md_t {{ reduce.name }}_md;

field_list {{ reduce.name }}_keys { 
	{% for key in reduce.key_fields %}
		{{ key.p4 }};
	{% endfor %}
}			
field_list_calculation calc_{{ reduce.name }}_dgst { 
	input { 
		{{ reduce.name }}_keys;
	} 
	algorithm : crc16; 
	output_width : 16; 
} 
field_list_calculation calc_{{ reduce.name }}_index { 
	input { 
		{{ reduce.name }}_keys;
	} 
	algorithm : crc32; 
	output_width : 16; 
} 
action do_hash_{{ reduce.name }} () {
	modify_field_with_hash_based_offset({{ reduce.name }}_md.dgst, 0, calc_{{ reduce.name }}_dgst, 65536);
	modify_field_with_hash_based_offset({{ reduce.name }}_md.idx1, 0, calc_{{ reduce.name }}_index, 65536);
	xor({{ reduce.name }}_md.idx2, {{ reduce.name }}_md.idx1, {{ reduce.name }}_md.dgst); 
}
table hash_{{ reduce.name }} {
	actions {
		do_hash_{{ reduce.name }};
	}
	size : 1;
	default_action : do_hash_{{ reduce.name }}();
}

register {{ reduce.name }}_dgst_array1 {
	width : 16; 
	instance_count : 65536; 
} 
register {{ reduce.name }}_dgst_array2 {
	width : 16;
	instance_count : 65536; 
} 
register {{ reduce.name }}_cnt_array1 {
	width : 16; 
	instance_count : 65536; 
} 
register {{ reduce.name }}_cnt_array2 {
	width : 16;
	instance_count : 65536; 
} 

action do_query_{{ reduce.name }}() { 
	register_read({{ reduce.name }}_md.dgst1, {{ reduce.name }}_dgst_array1, {{ reduce.name }}_md.idx1); 
	register_read({{ reduce.name }}_md.cnt1, {{ reduce.name }}_cnt_array1, {{ reduce.name }}_md.idx1); 
	subtract({{ reduce.name }}_md.query_res1, {{ reduce.name }}_md.dgst1, {{ reduce.name }}_md.dgst);

	register_read({{ reduce.name }}_md.dgst2, {{ reduce.name }}_array2, {{ reduce.name }}_md.idx2);
	register_read({{ reduce.name }}_md.cnt2, {{ reduce.name }}_cnt_array2, {{ reduce.name }}_md.idx2); 
	subtract({{ reduce.name }}_md.query_res2, {{ reduce.name }}_md.dgst2, {{ reduce.name }}_md.dgst); 
} 

table query_{{ reduce.name }} {
	actions {
		do_query_{{ reduce.name }};
	}
	size : 1;
	default_action : do_query_{{ reduce.name }}();
}

/* query_res1 is 0. */
action do_not_update_{{ reduce.name }}_cnt1 () {
	register_write({{ reduce.name }}_cnt_array1, {{ reduce.name }}_md.idx1, {{ reduce.name }}_md.cnt1 + 1);
	modify_field({{ reduce.name }}_md.output, {{ reduce.name }}_md.cnt1 + 1);
}

/* query_res2 is 0. */
action do_not_update_{{ reduce.name }}_cnt2 () {
	register_write({{ reduce.name }}_cnt_array2, {{ reduce.name }}_md.idx2, {{ reduce.name }}_md.cnt2 + 1);
	modify_field({{ reduce.name }}_md.output, {{ reduce.name }}_md.cnt2 + 1);
}

action do_update_{{ reduce.name }}_array1() {
	register_write({{ reduce.name }}_dgst_array1, {{ reduce.name }}_md.idx1, {{ reduce.name }}_md.dgst);
	register_write({{ reduce.name }}_cnt_array1, {{ reduce.name }}_md.idx1, 1);
	modify_field({{ reduce.name }}_md.output, 1);
}

action do_update_{{ reduce.name }}_array2() {
	register_write({{ reduce.name }}_array2, {{ reduce.name }}_md.idx2, {{ reduce.name }}_md.dgst);
	register_write({{ reduce.name }}_cnt_array1, {{ reduce.name }}_md.idx1, 1);
	modify_field({{ reduce.name }}_md.output, 1);
}

field_list field_list {{ reduce.name }}_cnt_keys {
	{{ reduce.name }}_md.dgst2;
	{{ reduce.name }}_md.cnt2;
}

action do_update_{{ reduce.name }} {
	register_write({{ reduce.name }}_array1, {{ reduce.name }}_md.idx1, {{ reduce.name }}_md.dgst);
	register_write({{ reduce.name }}_cnt_array1, {{ reduce.name }}_md.idx1, 1);
	register_write({{ reduce.name }}_array2, {{ reduce.name }}_md.idx2, {{ reduce.name }}_md.dgst1);
	register_write({{ reduce.name }}_cnt_array1, {{ reduce.name }}_md.idx1, {{ reduce.name }}_md.cnt1);
	modify_field({{ reduce.name }}_md.output, 1);
	generate_digest({{ reduce.name }}_cnt_keys);
}

//----------------------------------------------------------------------
// res1	res2 dgst1 dgst2 => action								priority
//   0    *	   *     *	 => do_not_update_{{ reduce.name }}_cnt1   0
//	 *	  0    *	 *   => do_not_update_{{ reduce.name }}_cnt2   1
//	 *    *	   0     *   => do_update_{{ reduce.name }}_array1     2
//	 *    *	   *     0   => do_update_{{ reudce.name }}_array2     3
//	 *    *	   *     *   => do_update_{{ reduce.name }}		       4
//----------------------------------------------------------------------
table update_{{ reduce.name }} {
	reads {
		{{ reduce.name }}_md.query_res1 : ternary;
		{{ reduce.name }}_md.query_res2 : ternary;
		{{ reduce.name }}_md.dgst1 : ternary;
		{{ reduce.name }}_md.dgst2 : ternary;
	}
	actions {
		do_not_update_{{ reduce.name }}_cnt1;
		do_not_update_{{ reduce.name }}_cnt2;
		do_update_{{ reduce.name }}_array1;
		do_update_{{ reduce.name }}_array2;
		do_update_{{ reduce.name }};
	}
	size : 5;
	default_action: do_update_{{ reduce.name }}();
}

register {{ reduce.name }}_check_reg {
	width : 16; 
	instance_count : {{ reduce.conflict_num }}; 
	direct : check_{{ reduce.name }};
} 

action do_check_{{ reduce.name }}() {
	register_read({{ reduce.name }}_md.output, {{ reduce.name }}_check_reg);
	add_to_filed({{ reduce.name }}_md.output, 1);
	register_write({{ reduce.name }}_check_reg, {{ reduce.name }}_md.output);
}

table check_{{ reduce.name }} {
	reads {
	{% for key in reduce.key_fields %}
		{{ key.p4 }} : exact;
	{% endfor %}
	}
	actions {
		do_check_{{ reduce.name }}ï¼›
	}
	size : {{ reduce.conflict_num }};
}

control {{ reduce.name }} {
	apply(check_{{ reduce.name }}) { 
		miss {
			apply(hash_{{ reduce.name }});
			apply(query_{{ reduce.name }});
			apply(update_{{ reduce.name }});
		}
	}
}

{% endfor %}

#endif /* _HYPERTESTER_QUERY_REDUCE_H_ */