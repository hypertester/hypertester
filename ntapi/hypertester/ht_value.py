# Author: Yu Zhou, Dai Zhang
# E-Mail: y-zhou@mails.tsinghua.edu.cn

from hypertester.ht_error import HTValueTypeError


class HTValue:

    VALUE_TYPE_CONSTANT = 'CONSTANT'
    VALUE_TYPE_ARRAY = 'ARRAY'
    VALUE_TYPE_RANGE_ARRAY = 'RANGE_ARRAY'
    VALUE_TYPE_RANDOM_ARRAY = 'RANDOM_ARRAY'
    VALUE_TYPE_QUERY_FIELD = 'QUERY_FIELD'

    VALUE_TYPES = [
        VALUE_TYPE_CONSTANT,
        VALUE_TYPE_ARRAY,
        VALUE_TYPE_RANGE_ARRAY,
        VALUE_TYPE_RANDOM_ARRAY,
        VALUE_TYPE_QUERY_FIELD
    ]

    def __init__(self, *args, **kwargs):
        if len(args) != 2:
            raise HTValueTypeError("HTValue expects 2 argument but given " + str(len(args)))

        if args[0] not in HTValue.VALUE_TYPES:
            raise HTValueTypeError(repr(args[0]) + " is not a legal type for HTValue.")

        self.type = args[0]
        self.value = args[1]
        if self.type == "ARRAY" and not isinstance(self.value, list):
            raise HTValueTypeError("second arguement of ARRAY type HTValue must have a type of list.")
        if self.type == "RANGE_ARRAY" and ( not isinstance(self.value, tuple) or len(self.value) != 3 ) :
            raise HTValueTypeError("HTValue of RANGE_ARRAY takes (begin, stop, step) as value.")
        if self.type == "QUERY_FIELD" and ( not isinstance(self.value, str) ):
            raise HTValueTypeError("HTValue of RANGE_ARRAY takes a 'str' as value.")

    def __repr__(self):
        return self.type + ', ' + repr(self.value)

    def get_value(self):
        pass

    def get_type(self):
        return self.type


class HTConstant(HTValue):
    '''
        Constant value for HyperTester.
    '''
    def __init__(self, value):
        if isinstance(value, str):
            value = int(value)
        elif isinstance(value, int):
            pass
        else:
            raise HTValueTypeError('' +
                                   value +
                                   ' is not a valid constant type (can be int or string).')
        HTValue.__init__(self, HTValue.VALUE_TYPE_CONSTANT, value)

    def get_value(self):
        return self.value


class HTNormal(HTValue):
    '''
        The array contains a series of constant values.
    '''
    def __init__(self, array):
        if isinstance(array, list):
            array = tuple(array)
        elif isinstance(array, tuple):
            pass
        else:
            raise HTValueTypeError('' +
                                   array +
                                   ' is not a valid array type (can be list or tuple).')
        HTValue.__init__(self, HTValue.VALUE_TYPE_ARRAY, array)

    def get_value(self):
        '''
            Get the value list.
        :return: A tuple containing all the constant values
        '''
        return self.value

    def get_max_value(self):
        return max(self.value)

    def get_tuple_size(self):
        return len(self.value)


class HTRange(HTValue):
    '''
        The range array defined by a start, end , and step (default to be 1)
    '''
    def __init__(self, start, end, step=1):
        if isinstance(start, str):
            start = int(start)
        elif isinstance(start, int):
            if start < 0:
                raise HTValueTypeError('start (%d) should be larger than 0.'%start)
        else:
            raise HTValueTypeError('' +
                                   str(start) +
                                   ' is not a valid start type (can be string or int).')

        if isinstance(end, str):
            end = int(end)
        elif isinstance(end, int):
            if end < 0:
                raise HTValueTypeError('end (%d) should be larger than 0.' % end)
        else:
            raise HTValueTypeError('' +
                                   str(end) +
                                   ' is not a valid step type (can be string or int).')

        if isinstance(step, str):
            step = int(step)
        elif isinstance(end, int):
            pass
        else:
            raise HTValueTypeError('' +
                                   str(step) +
                                   ' is not a valid step type (can be string or int).')

        self.start, self.end, self.step = start, end, step

        HTValue.__init__(self, HTValue.VALUE_TYPE_RANGE_ARRAY, (start, end, step))

    def get_array(self):
        return range(self.start, self.end, self.step)


class HTRandom(HTValue):
    '''
        The random array generated by HyperTester
    '''
    RANDOM_DISTRIBUTION_NORMAL = 'NORMAL'
    RANDOM_DISTRIBUTION_EXP = 'EXP'

    RANDOM_DISTRIBUTIONS = [
        RANDOM_DISTRIBUTION_NORMAL,
        RANDOM_DISTRIBUTION_EXP
    ]

    def __init__(self, dist, parameters, size):
        if isinstance(dist, str):
            if dist not in HTRandom.RANDOM_DISTRIBUTIONS:
                raise HTValueTypeError(str(dist) + ' is not a supported distributionã€‚ '
                                                   'Supported distributions include:' +
                                       str(HTRandom.RANDOM_DISTRIBUTIONS))
        else:
            raise HTValueTypeError(str(dist) +
                                   ' is not a valid step type (can be string or int).')

        self.dist = dist
        self.parameters = parameters
        self.size = size


class HTValueFactory:
    '''
        The factory functions for generating
    all values supported by HyperTester.
    '''
    pass

